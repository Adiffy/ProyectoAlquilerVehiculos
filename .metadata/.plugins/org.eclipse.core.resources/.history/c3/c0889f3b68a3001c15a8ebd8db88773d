package InterfazUsuario;

import java.util.ArrayList;
import java.util.Scanner;
import java.util.TreeMap;

import accesoADatos.Serializar;
import clasesObjetos.Cliente;
import clasesObjetos.CocheCombustion;
import clasesObjetos.CocheElectrico;
import clasesObjetos.Empleado;
import clasesObjetos.Empresa;
import clasesObjetos.Furgoneta;
import clasesObjetos.Moto;
import clasesObjetos.Oficina;
import clasesObjetos.Vehiculo;
import comparadores.ComparaVehiculoPorCategoria;
import exceptions.CarnetRequeridoInvalidoException;
import exceptions.CilindradaNoValidaException;
import exceptions.CodigoPostalException;
import exceptions.ConsumoNoValidoException;
import exceptions.EmisionesNoValidasException;
import exceptions.LetrasMatriculaNoValidasException;
import exceptions.LicenciaNoValidaException;
import exceptions.LongitudCadenaNoValidaException;
import exceptions.LongitudNoValidaException;
import exceptions.NumPlazasNoValidoException;
import exceptions.NumeroMatriculaNoValidoException;
import exceptions.PlantaNoValidaException;
import exceptions.PotenciaNoValidaException;
import exceptions.RecargoNoValidoException;
import exceptions.TiempoRecargaNoValidoException;
import exceptions.TipoNoValidoException;
import metodosMenu.Metodos;

public class Menus {

	//Variables que se reutilizan en muchos de los métodos de esta clase
	private static String menError = "Seleccione una opción válida. Puede ser:"; //El mensaje que aparecerá si el usuario elige una opción inválida
	private static String mensaje = "Introduzca una de las siguientes opciones:";
	private static String errorLetras = "Debe elegir una opción válida pulsando:"; //Error en los menús no-numéricos
	
	public static void principal(Empresa empresa, Scanner lector) throws TipoNoValidoException, TiempoRecargaNoValidoException, LicenciaNoValidaException, EmisionesNoValidasException, ConsumoNoValidoException, PotenciaNoValidaException, RecargoNoValidoException, LetrasMatriculaNoValidasException, NumeroMatriculaNoValidoException, NumPlazasNoValidoException, LongitudNoValidaException, PlantaNoValidaException, CodigoPostalException, LongitudCadenaNoValidaException, CilindradaNoValidaException, CarnetRequeridoInvalidoException
	{
		
		String[] opciones = {"1.- Ficheros maestros", "2.- Gestión de oficinas", "3.- Mostrar listados", "4.- Salir"};
		String opcValidas = "1234";
		
		
		boolean noSale = true; //buleano para el bucle 
		
		do
		{
			switch (metodosMenu.Metodos.menu(opciones, opcValidas, "MENÚ PRINCIPAL", menError, lector))
			{
			case "1":
				Menus.ficherosMaestros(empresa, lector);
			case "2"://Gestión de oficinas
				Menus.oficinas(empresa, lector);
			case "3":	//Listados
				Menus.MenuListados(empresa, lector);
			case "4": //SALIR DE VERDAD
				BarraDeCarga.pintar();
				noSale = false;
				break;
			}
		}while(noSale);
	}
	
	private static void ficherosMaestros(Empresa empresa, Scanner lector) throws TipoNoValidoException, TiempoRecargaNoValidoException, LicenciaNoValidaException, EmisionesNoValidasException, ConsumoNoValidoException, PotenciaNoValidaException, RecargoNoValidoException, LetrasMatriculaNoValidasException, NumeroMatriculaNoValidoException, NumPlazasNoValidoException, LongitudNoValidaException, PlantaNoValidaException, CodigoPostalException, LongitudCadenaNoValidaException, CilindradaNoValidaException, CarnetRequeridoInvalidoException 
	{
		String[] opciones = {"1.- Configurar garaje", "2.- Gestionar clientes", "3.- Mostrar listados", "4.- Configurar oficinas", "5.- Salir"};
		String opcValidas = "12345";
			boolean sale= false ;
		do 
		{
			switch (metodosMenu.Metodos.menu(opciones, opcValidas, "Ficheros maestros", menError, lector))
			{
			case "1":
				String[] opc = {"1.- Añadir / eliminar vehículos a la flota","2.- Modificar listado de clientes", "3.- Modificar listado de empleados", "4.- Modificar listado de oficinas","5.- Gestionar alquileres","6.- Salir"};
				String OPC = "12345";
				switch (metodosMenu.Metodos.menu(opc, OPC, "Gestión de ficheros maestros", menError, lector))
				{
				case "1":
					Menus.flotaVehicular(empresa, lector);
					break;
				case "2":
					Menus.clientes(empresa, lector);
					break;
				case "3":
					Menus.MenuListados(empresa, lector);
					break;
				case "4":
					Menus.MenuOficinas(empresa, lector);
					break;
				case "5":
					
					break;
				case "6":
					sale = true;
					break;
				}
			}
		}while(!sale);
		
	}
	private static void alquileres(Empresa empresa, Scanner lector)
	{
		String[] opcione = {"1.- Nuevo alquiler","2.- Modificar alquiler existente","3.- Eliminar alquiler","4.- Salir"};
		String validadas = "1234";
		String mensajeError = "Elija una opción válida:";
		boolean sale = false;
		
		do
		{
			switch (metodosMenu.Metodos.menu(opcione, validadas, "Gestión de alquileres", mensajeError, lector))
			{
			case "1":
				
			case "2":
				
			case "3":
				
			case "4":
				sale = true;	//sale
				break;
			}
		}while(!sale);
	}
	public static void ListadoOficinas(Empresa empresa, Scanner l)
	{
//		String elegida = null;
		
//		String claves = metodos.TreeMapToArrayList.CodigoOficinas(empresa.getOficinas());
		ArrayList<Oficina>ofis = new ArrayList<Oficina>(empresa.getOficinas().values());//Metemos los valores del treeMap en el ArrayList
		Metodos.pintaSubrayado("Listado de oficinas");
		for (Oficina ofi:ofis)
		{
//			opc[i]=ofi.toString();
//			i++;
			System.out.println(ofi);
		}
//		elegida = l.nextLine();
//		switch (Metodos.menu(opc, claves, "Escribe un código de oficina de la siguiente lista", errorLetras, l))
		
//		return elegida;
	}
	private static void MenuListados(Empresa empresa, Scanner lector) throws LicenciaNoValidaException, LongitudNoValidaException, CodigoPostalException, LongitudCadenaNoValidaException, PlantaNoValidaException, TipoNoValidoException, EmisionesNoValidasException, ConsumoNoValidoException, PotenciaNoValidaException, RecargoNoValidoException, LetrasMatriculaNoValidasException, NumeroMatriculaNoValidoException, NumPlazasNoValidoException
	{
		String[] list = {"1.- Listar vehículos","2.- Listar Personas", "3.- Listar Oficinas","4.- Salir"};
		String posibilidades = "1234";
		boolean seVa = false;
		
		do 
		{
			switch (metodosMenu.Metodos.menu(list, posibilidades, "LISTADOS",mensaje, lector))
			{
			case "1": 	//Vehiculos
				Menus.listadoVehiculos(empresa, lector);
				break;
			case "2":	//Personas
				Menus.listadoPersonas(empresa, lector);
				break;
			case "3":	//Oficinas
				Menus.listadoOficinas(empresa, lector);
				break;
			case "4": //Salir
				seVa = true;
				break;
			}
		}while(!seVa);
		
	}
	private static void listadoPersonas(Empresa empresa, Scanner lector) throws LicenciaNoValidaException, LongitudNoValidaException, CodigoPostalException, LongitudCadenaNoValidaException
	{
		String[] elecc = {"1.- Empleados","2.- Clientes","3.- Atrás (Salir)"};
		String posib = "123";
		String error = "Seleccione una opción de este conjunto:";
		boolean sale = false;
		
		do
		{
			switch (metodosMenu.Metodos.menu(elecc, posib, "TIPOS DE PERSONAS A LISTAR", error, lector))
			{
			case "1":	//Empleados
				Menus.listadoPersonasPor(empresa, "Empleado", lector);
				break;
			case "2":	//Clientes
				Menus.listadoPersonasPor(empresa, "Clientes", lector);
				break;
			case "3": //Salir 
				break;
			}
		}while(!sale);
	}
	
	private static void listadoVehiculos(Empresa empresa, Scanner lector) throws LicenciaNoValidaException, LongitudNoValidaException, CodigoPostalException, LongitudCadenaNoValidaException, TipoNoValidoException, EmisionesNoValidasException, ConsumoNoValidoException, PotenciaNoValidaException, RecargoNoValidoException, LetrasMatriculaNoValidasException, NumeroMatriculaNoValidoException, NumPlazasNoValidoException, PlantaNoValidaException
	{
		String[] elecc = {"1.- De combustión","2.- Eléctricos","3.- Atrás (Salir)"};
		String posib = "123";
		String error = "Seleccione una opción de este conjunto:";
		boolean sale = false;
		
		do
		{
			switch (metodosMenu.Metodos.menu(elecc, posib, "TIPOS DE PERSONAS A LISTAR", error, lector))
			{
			case "1":	//De combustión
				Menus.combustion(empresa, lector);
				break;
			case "2":	//Eléctricos
				Menus.listaElectrico(empresa, lector);
				break;
			case "3": //Salir 
				sale = true;
				break;
			}
		}while (!sale);
	}
	
	private static void listadoOficinas(Empresa empresa, Scanner lector) throws LicenciaNoValidaException, LongitudNoValidaException, CodigoPostalException, LongitudCadenaNoValidaException
	{
		String[] elecc = {"1.- Empleados","2.- Clientes","3.- Atrás (Salir)"};
		String posib = "123";
		String error = "Seleccione una opción de este conjunto:";
		boolean sale = false;
		
		do
		{	//No saldrá hasta que le dé explícitamente
			switch (metodosMenu.Metodos.menu(elecc, posib, "TIPOS DE PERSONAS A LISTAR", error, lector))
			{
			case "1":	//Empleados
				Menus.listadoPersonasPor(empresa, "Empleado", lector);
				break;
			case "2":	//Clientes	
				Menus.listadoPersonasPor(empresa, "Clientes", lector);
				break;
			case "3": //Salir 
				sale = true;
				break;
			}
		}while(!sale);
	}
	private static void listaElectrico(Empresa empresa, Scanner lector) throws LicenciaNoValidaException, LongitudNoValidaException, CodigoPostalException, LongitudCadenaNoValidaException, LetrasMatriculaNoValidasException, NumeroMatriculaNoValidoException
	{
		String[] tipo = {"1.- Coche eléctrico", "2.- Moto eléctrica", "3.- Atrás (Salir)"};
		String opcio = "123";
		switch (metodosMenu.Metodos.menu(tipo, opcio, "LISTAR VEHÍCULOS ELÉCTRICOS", errorLetras, lector))
		{
		case "1":	//Coche eléctrico
			
				Menus.listadosElectricos(empresa, "CocheElectrico", lector);
			
		case "2":	//Moto
				Menus.listadosElectricos(empresa, "Moto", lector);
		case "3":
			break;
		}
	}
	private static void listadosElectricos(Empresa empresa,String tipoVehiculo, Scanner lector) throws LicenciaNoValidaException, LongitudNoValidaException, CodigoPostalException, LongitudCadenaNoValidaException, LetrasMatriculaNoValidasException, NumeroMatriculaNoValidoException
	{
		String error = "Seleccione una opción de este conjunto:";
		String[] a = {"1.- Por Matrícula","2.- Por categoría","3.- Atrás (Salir)"};
		String b = "123";
		boolean sale = false;		//A priori no se sale
	
		do
		{
			switch (metodosMenu.Metodos.menu(a, b, "Listar"+ tipoVehiculo +"por", error, lector))
			{
			case "1":	//Listar por Matrícula
				ArrayList <Moto> lista = null;
				ArrayList <CocheElectrico> lista2 = null;
				boolean Moto;	//Sabremos si es Moto o no 
				
				if (tipoVehiculo.compareToIgnoreCase("Moto")==0  )
				{
					Moto = true;
					lista = metodos.TreeMapToArrayList.listarMotos(empresa.getGaraje());
					
				}else {
					Moto = false;
					lista2 = metodos.TreeMapToArrayList.listarCocheElectrico(empresa.getGaraje());
				}
				//Ahora mostramos los listados
				if (Moto)
				{
					for (Vehiculo aux: lista)
					{
						System.out.printf("Con Matrícula: "+ aux.getMatricula() +" - " + aux.toString());
					}
				}else {
					for (Vehiculo aux: lista2)
					{
						System.out.printf("Con Matrícula: "+ aux.getMatricula() +" - " + aux.toString());
					}
				}
				break;
				
			case "2":	//Listar por categoria
				
				lista = null;
				lista2 = null;
				if (tipoVehiculo.compareToIgnoreCase("Moto")==0  )
				{
					Moto = true;
					lista = metodos.TreeMapToArrayList.listarMotos(empresa.getGaraje());
					
				}else {
					Moto = false;
					lista2 = metodos.TreeMapToArrayList.listarCocheElectrico(empresa.getGaraje());
				}			
				//Ahora mostramos los listados
				if (Moto)
				{
					ListarMotosPorCategoria(lista);
				}else {
					ListarCocheElectricoPorCategoria(lista2);;
				}
				break;
			case "3":	//SALIR
				sale = true;
				break;
			}
		}while(!sale);
	}
	private static void ListarCocheElectricoPorCategoria(ArrayList<CocheElectrico> flota) 
	{
		
		ComparaVehiculoPorCategoria c = new ComparaVehiculoPorCategoria(); 
		flota.sort(c);
		for (Vehiculo auxiliar: flota)
		{
			System.out.printf("Coche eléctrico: "+auxiliar);
		}
	}
	private static void ListarMotosPorCategoria(ArrayList<Moto> lista) 
	{
		
		ComparaVehiculoPorCategoria c = new ComparaVehiculoPorCategoria(); 
		lista.sort(c);
		for (Vehiculo auxiliar: lista)
		{
			System.out.printf("Moto eléctrica: "+auxiliar);
		}
	}
	private static void listadoPersonasPor(Empresa empresa,String tipoPersona, Scanner lector) throws LicenciaNoValidaException, LongitudNoValidaException, CodigoPostalException, LongitudCadenaNoValidaException
	{
		String error = "Seleccione una opción de este conjunto:";
		String[] a = {"1.- Por DNI","2.- Por nombre","3.- Atrás (Salir)"};
		String b = "123";
		switch (metodosMenu.Metodos.menu(a, b, "Listar"+ tipoPersona +"por", error, lector))
		{
		case "1":	//Listar por DNI
			TreeMap<String, Cliente> lista = null;
			TreeMap<String, Empleado> lista2 = null;
			boolean Cliente;	//Sabremos si es Cliente o no 
			if (tipoPersona.compareToIgnoreCase("Cliente")==0 || tipoPersona.compareToIgnoreCase("Clientes")==0 )
			{
				Cliente = true;
				lista = empresa.getClientes();
			}else {
				Cliente = false;
				lista2 = empresa.getEmpleados();
			}
			//Ahora mostramos los listados
			if (Cliente)
			{
				Menus.ListarTreeMapClienteDNI(lista);
			}else {
				Menus.ListarTreeMapEmpleadoDNI(lista2);
			}
			
		case "2":	//Listar por nombre
			 ArrayList<Cliente> A = new ArrayList<>();
			 ArrayList<Empleado> E = new ArrayList<>();
			if (tipoPersona.compareToIgnoreCase("Cliente")==0 || tipoPersona.compareToIgnoreCase("Clientes")==0 )
			{
				Cliente = true;
				
			}else {
				Cliente = false;
				
			}
			//Ahora mostramos los listados
			if (Cliente)
			{
				A =empresa.ListarClienteNombre();
				for (Cliente clien:A)
				{
					System.out.println(clien);
				}
			}else {
				E = empresa.ListarEmpleadoNombre();
				for (Empleado emple:E)
				{
					System.out.println(emple);
				}
			}
		case "3":	//SALIR
			break;
		}
	}
	
	private static void eliminaOficina(Empresa empresa, Scanner lector)
	{
		Menus.ListarTreeMapOficinas(empresa.getOficinas());
		String[] opcion = {""};
		String respuesta;
		
		respuesta = metodosMenu.Metodos.menu(opcion, metodos.TreeMapToArrayList.DNIsEmpleados(empresa.getEmpleados()),"Escriba el DNI del empleado a borrar", menError, lector);
		if (empresa.getEmpleados().containsKey(respuesta))	//Si alguien usa esa clave principal
		{
			String[] lista = {"S.- Sí", "N.- No"};
			String valor = "SN";
			switch (metodosMenu.Metodos.menu(lista, valor,"El empleado se borrará ¿Está seguro?", menError,  lector))
			{
			case "S":
				empresa.eliminarOficina(respuesta);
				Serializar.grabaEmpresa(empresa);
			case "N":
				break; 	//Sale sin tocar nada
			}
		}
	
	}
	
	private static void MenuOficinas(Empresa empresa, Scanner lector) throws LongitudNoValidaException, PlantaNoValidaException, CodigoPostalException, LongitudCadenaNoValidaException
	{
		String[] opciom = {"A.- Nueva oficina", "B.- Eliminar oficina", "C.- Salir"};
		String validad = "ABC";
		

		switch (metodosMenu.Metodos.menu(opciom, validad, "GESTOR DE OFICINAS", menError, lector))
		{
		case "A":	//Añadir
			Oficina nueva = PideDato.oficina(lector);
			empresa.nuevaOficina(nueva);	//Metemos la oficina
			Serializar.grabaEmpresa(empresa); 	//Guardamos 
		case "B":	//Eliminar
			Menus.eliminaOficina(empresa, lector);
		case "C": //Salir
			break;
		}
		
	}
	private static void eliminar(Empresa empresa, Scanner lector)
	{
		String elegida;
		System.out.println("Elija la matrícula del vehículo a eliminar:");
		Menus.listarVehiculos(empresa);//Los listamos
		elegida = lector.nextLine();
		
		if (empresa.getOficinas().containsKey(elegida))
		{
			empresa.eliminarOficina(elegida);
			Serializar.grabaEmpresa(empresa);
		}
		
		
	}
	
	private static  void combustion(Empresa empresa, Scanner lector) throws TipoNoValidoException, EmisionesNoValidasException, ConsumoNoValidoException, PotenciaNoValidaException, RecargoNoValidoException, LetrasMatriculaNoValidasException, NumeroMatriculaNoValidoException, NumPlazasNoValidoException, LongitudNoValidaException, PlantaNoValidaException, CodigoPostalException, LongitudCadenaNoValidaException
	{
		
		String[] combustion = {"1.- Coche","2.- Furgoneta", "3.- Volver"};
		String opcValidas = "1234";
		
			
		switch (metodosMenu.Metodos.menu(combustion, opcValidas, "Vehiculos de combustión", menError, lector))
		{
		case "1":	//Coche
			Menus.creaCocheCombustion(empresa, lector);												
		case "2":	//Furgoneta
			Menus.creaFurgoneta(empresa, lector);
		case "3":	//Salir
			break;
		}
			
	}
	
	private static void listarVehiculos(Empresa empresa)
	{
		
		ArrayList<Vehiculo> flota = new ArrayList<Vehiculo>(empresa.getGaraje().values());
		for (Vehiculo a:flota)
		{
			System.out.println(a);
		}
	}
	
	private static void electrico(Empresa empresa, Scanner lector) throws TiempoRecargaNoValidoException, TipoNoValidoException, LetrasMatriculaNoValidasException, NumeroMatriculaNoValidoException, RecargoNoValidoException, EmisionesNoValidasException, ConsumoNoValidoException, PotenciaNoValidaException, CilindradaNoValidaException, CarnetRequeridoInvalidoException, NumPlazasNoValidoException, LongitudNoValidaException, PlantaNoValidaException, CodigoPostalException, LongitudCadenaNoValidaException
	{
		
		String[] electrico = {"1.- Coche","2.- Moto", "3.- Volver"};
		String opcValidas = "1234";
		
		
		switch (metodosMenu.Metodos.menu(electrico, opcValidas, "Vehiculos eléctricos", menError, lector))
		{
		case "1":	//Coche
			Menus.creaCocheElectrico(empresa, lector);
		case "2":	//Moto
			Menus.creaMoto(empresa, lector);
		case "3":	//Salir
			break;
		}
	}
	private static void add(Empresa empresa, Scanner lector) throws TipoNoValidoException, TiempoRecargaNoValidoException, EmisionesNoValidasException, ConsumoNoValidoException, PotenciaNoValidaException, RecargoNoValidoException, LetrasMatriculaNoValidasException, NumeroMatriculaNoValidoException, NumPlazasNoValidoException, LongitudNoValidaException, PlantaNoValidaException, CodigoPostalException, LongitudCadenaNoValidaException, CilindradaNoValidaException, CarnetRequeridoInvalidoException
	{
		String[] elec = {"A.- De combustión","B.- Eléctrico","C.- Salir"}; //elec de Elección
		String validas = "ABC";
		
		switch (metodosMenu.Metodos.menu(elec, validas, "TIPO DE VEHÍCULO",errorLetras, lector))
		{
		case "A","a":	//Combustion
			Menus.combustion(empresa, lector);
		case "B","b":	//Electrico
			Menus.electrico(empresa, lector);
		case "C","c": //SALIR
			break;
		}
	}
	private static void flotaVehicular(Empresa empresa, Scanner lector) throws TipoNoValidoException, TiempoRecargaNoValidoException, EmisionesNoValidasException, ConsumoNoValidoException, PotenciaNoValidaException, RecargoNoValidoException, LetrasMatriculaNoValidasException, NumeroMatriculaNoValidoException, NumPlazasNoValidoException, LongitudNoValidaException, PlantaNoValidaException, CodigoPostalException, LongitudCadenaNoValidaException, CilindradaNoValidaException, CarnetRequeridoInvalidoException
	{
		String[] elec = {"A.- AÑADIR VEHÍCULO","B.- ELIMINAR VEHÍCULO","C.- SALIR"}; //elec de Elección
		String validas = "ABC";
		 
		
		switch (metodosMenu.Metodos.menu(elec, validas, "FLOTA DE VEHÍCULOS",errorLetras, lector))
		{				
		case "A","a": //Lo hacemos tolerante a mayúsculas y minúsculas
			Menus.add(empresa, lector);
		case "B","b":	//Eliminar vehículo
			Menus.eliminar(empresa, lector);
		case "C","c": //SALIR
			break;
		}
	}
	private static void clientes(Empresa empresa, Scanner lector) throws LicenciaNoValidaException
	{
		String[] opcioness = {"A.- Añadir cliente", "B.- Dar de baja", "C.- Salir"};
		String Validas = "ABC";
		
		switch (metodosMenu.Metodos.menu(opcioness, Validas, "GESTIÓN DE CLIENTES",errorLetras, lector))
		{
		case "A","a": 	//Damos de alta nuevos clientes
			Cliente nuevo =InterfazUsuario.PideDato.cliente(lector);
			empresa.nuevoCliente(nuevo);
			Serializar.grabaEmpresa(empresa);
		case "B","b":	//Eliminamos clientes de la empresa
			Menus.eliminaCliente(empresa, lector);
			/*
			 * 1- Listar empleados
			 * 2- Buscar por clave principal
			 * 3- Eliminar
			 */
		case "C","c":
			break;
		}
	}
	private static void ListarClientes(Empresa empresa)
	{
		ArrayList<Cliente> clientes = new ArrayList<Cliente>(empresa.getClientes().values());
		for (Cliente nuevo:clientes)
		{
			System.out.printf("Cliente:"+nuevo+"DNI:"+nuevo.getDni());
		}
	}
	private static void eliminaCliente(Empresa empresa, Scanner lector)
	{
		String elegida;
		boolean bien = false;
		System.out.println("Elija el DNI del cliente a eliminar:");
		
		do{
			Menus.ListarClientes(empresa);
			elegida = lector.nextLine();
			if (empresa.getOficinas().containsKey(elegida))
			{
				empresa.eliminarOficina(elegida);
				Serializar.grabaEmpresa(empresa);
				bien = true;
			}
		}while(!bien);
	}
	
	private static void oficinas(Empresa empresa, Scanner lector) throws LicenciaNoValidaException, LongitudNoValidaException, PlantaNoValidaException, CodigoPostalException, LongitudCadenaNoValidaException
	{
		String[] opcioness = {"A.- Empleados", "B.- Oficinas", "C.- Salir"};
		String Validas = "ABC";
		boolean sale = false;
		
		do 
		{
			switch (metodosMenu.Metodos.menu(opcioness, Validas, "GESTIÓN DE OFICINAS",errorLetras, lector))
			{
			case "A","a":	//Añadir o eliminar empleados
				Menus.MenuEmpleado(empresa,lector);
			case "B","b":	//Añadir o eliminar oficinas
				Menus.MenuOficinas(empresa, lector);
			case "C","c":
				sale = true;
				break;	//Salir		
			}
		}while(!sale);
		
	}
	
	private static void ListarTreeMapEmpleadoDNI(TreeMap<String,Empleado> map)
	{
		map.entrySet().forEach((entry) -> {
            System.out.printf("Con DNI: %s - Empleado: %s %n", entry.getKey(), entry.getValue());
        });
	}
	private static void ListarTreeMapOficinas(TreeMap<String,Oficina> map)
	{
		map.entrySet().forEach((entry) -> {
            System.out.printf("Con Código: %s - Oficina: %s %n", entry.getKey(), entry.getValue());
        });
	}
	private static void ListarTreeMapClienteDNI(TreeMap<String,Cliente> map)
	{
		map.entrySet().forEach((entry) -> {
            System.out.printf("Con DNI: %s - Cliente: %s %n", entry.getKey(), entry.getValue());
        });
	}
	
	private static void eliminaEmpleado(Empresa empresa, Scanner lector)
	{
		String respuesta;
		/*
		 * 1- Listar empleados
		 * 2- Buscar por clave principal
		 * 3- Eliminar
		 */
		Menus.ListarTreeMapEmpleadoDNI(empresa.getEmpleados());
		String[] opcion = {""};
		boolean sale = false;
		
		respuesta = metodosMenu.Metodos.menu(opcion, metodos.TreeMapToArrayList.DNIsEmpleados(empresa.getEmpleados()),"Escriba el DNI del empleado a borrar", errorLetras, lector);
		if (empresa.getEmpleados().containsKey(respuesta))	//Si alguien usa esa clave principal
		{
			String[] lista = {"S.- Sí", "N.- No"};
			String valor = "SN";
			do
			{
				switch (metodosMenu.Metodos.menu(lista, valor,"El empleado se borrará ¿Está seguro?", errorLetras,  lector))
				{
				case "S":
					empresa.despedirEmpleado(respuesta);
					Serializar.grabaEmpresa(empresa); 	//Guardamos 
					break;
				case "N":
					sale = true;
					break; 	//Sale sin tocar nada
				}
			}while(!sale);
		}
	}
	
	private static void MenuEmpleado(Empresa empresa, Scanner lector) throws LicenciaNoValidaException, LongitudNoValidaException, PlantaNoValidaException, CodigoPostalException, LongitudCadenaNoValidaException
	{
		String[] opcc = {"A.- Añadir nuevo empleado","B.- Dar de baja un empleado","C.- Salir"};
		String Validas = "ABC";

		
		switch (metodosMenu.Metodos.menu(opcc, Validas, "GESTOR DE EMPLEADOS", errorLetras, lector))
		{
		case "A","a": //Añadir empleado 
			Empleado emple = PideDato.empleado(empresa, lector); //Creamos empleado
			empresa.nuevoEmpleado(emple);	//Añadimos el empleado al TreeMap
			Serializar.grabaEmpresa(empresa);
		case "B","b":	//Eliminar empleado
			Menus.eliminaEmpleado(empresa, lector);
		case "C","c":
			break;	//Salir
		}
	}
	
	private static void creaCocheCombustion(Empresa empresa, Scanner lector) throws TipoNoValidoException, RecargoNoValidoException, LetrasMatriculaNoValidasException, NumeroMatriculaNoValidoException, EmisionesNoValidasException, NumPlazasNoValidoException, ConsumoNoValidoException, PotenciaNoValidaException, LongitudNoValidaException, PlantaNoValidaException, CodigoPostalException, LongitudCadenaNoValidaException
	{
		
			CocheCombustion nuevo = PideDato.cocheCombustion(empresa, lector);
			empresa.addAlGaraje(nuevo);
			Serializar.grabaEmpresa(empresa);//Guardamos cambios
		
	}
	
	private static void creaCocheElectrico(Empresa empresa, Scanner lector) throws TiempoRecargaNoValidoException, TipoNoValidoException, RecargoNoValidoException, LetrasMatriculaNoValidasException, NumeroMatriculaNoValidoException, EmisionesNoValidasException, NumPlazasNoValidoException, ConsumoNoValidoException, PotenciaNoValidaException, LongitudNoValidaException, PlantaNoValidaException, CodigoPostalException, LongitudCadenaNoValidaException
	{
		
			CocheElectrico nuevo = PideDato.cocheElectrico(empresa, lector);
			empresa.addAlGaraje(nuevo);
			Serializar.grabaEmpresa(empresa);//Guardamos cambios
		
	}
	
	private static void creaMoto(Empresa empresa, Scanner lector) throws LetrasMatriculaNoValidasException, NumeroMatriculaNoValidoException, RecargoNoValidoException, EmisionesNoValidasException, ConsumoNoValidoException, PotenciaNoValidaException, CilindradaNoValidaException, CarnetRequeridoInvalidoException
	{
		
			Moto nueva = PideDato.moto(lector);
			empresa.addAlGaraje(nueva);
			Serializar.grabaEmpresa(empresa);//Guardamos cambios
		
		
	}
	private static void creaFurgoneta(Empresa empresa, Scanner lector) throws EmisionesNoValidasException, ConsumoNoValidoException, PotenciaNoValidaException, RecargoNoValidoException, LetrasMatriculaNoValidasException, NumeroMatriculaNoValidoException
	{
		
			Furgoneta furgo = PideDato.furgoneta(lector);
			empresa.addAlGaraje(furgo);
			Serializar.grabaEmpresa(empresa);//Guardamos cambios
		
	}
	
	
		
	
	
	}