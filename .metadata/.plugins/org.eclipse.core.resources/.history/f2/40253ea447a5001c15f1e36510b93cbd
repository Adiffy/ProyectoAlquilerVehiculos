package clasesObjetos;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.GregorianCalendar;

import exceptions.FechaNoValidaException;

public class Alquiler implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
		//Variables que Se usarán en caso de alquiler
		private String codigo ; 
		private GregorianCalendar FechaInicioAlquiler = new GregorianCalendar();
		private GregorianCalendar FechaPrevistaFinAlquiler = new GregorianCalendar();
		private GregorianCalendar FechaDevolucion = new GregorianCalendar();
		
//		private Cliente cliente;
//		private Empleado encargado;
		private Vehiculo aAlquilar;
		private double PrecioAlquiler ;
		
		private Oficina OficinaRecogida;
		private Oficina OficinaEntrega;
		
		private Vehiculo coche;
		
		//Getters & Setters
		
		/**
		 * @return the coche
		 */
		public Vehiculo getCoche() {
			return coche;
		}

		/**
		 * @param coche the coche to set
		 */
		public void setCoche(Vehiculo coche) {
			this.coche = coche;
		}

		/**
		 * @return the aAlquilar
		 */
		public Vehiculo getaAlquilar() {
			return aAlquilar;
		}

		/**
		 * @param aAlquilar the aAlquilar to set
		 */
		public void setaAlquilar(Vehiculo aAlquilar) {
			this.aAlquilar = aAlquilar;
		}

		/**
		 * @return the encargado
//		 */
//		public Empleado getEncargado() {
//			return encargado;
//		}
//
//		/**
//		 * @param encargado the encargado to set
//		 */
//		public void setEncargado(Empleado encargado) {
//			this.encargado = encargado;
//		}
//
//		/**
//		 * @return the cliente
//		 */
//		public Cliente getCliente() {
//			return cliente;
//		}
//
//		/**
//		 * @param cliente the cliente to set
//		 */
//		public void setCliente(Cliente cliente) {
//			this.cliente = cliente;
//		}

		public String getCodigo() {
			String copia = codigo;
			return copia;
		}

		public double getPrecioAlquiler() {
			//tipo primitivo
			return this.PrecioAlquiler;
		}

		public void setPrecioAlquiler(Vehiculo coche) {
			int dias = this.getNumDias();
			PrecioAlquiler = dias*coche.PrecioAlquiler();
		}

		public void setCodigo(String codigo) {
			
			this.codigo = codigo;
		}

		public GregorianCalendar getFechaInicioAlquiler() {
			return (GregorianCalendar) FechaInicioAlquiler.clone();
		}
		
		@SuppressWarnings("static-access")
		public void setFechaInicioAlquiler(GregorianCalendar fechaInicioAlquiler) throws FechaNoValidaException {
			if ((fechaInicioAlquiler.MONTH >= GregorianCalendar.getInstance().MONTH || fechaInicioAlquiler.DAY_OF_YEAR >= GregorianCalendar.getInstance().DAY_OF_YEAR))
			{
				FechaInicioAlquiler = (GregorianCalendar) fechaInicioAlquiler.clone();
			}else {
				throw new FechaNoValidaException("Fecha de inicio de alquiler no válida");
			}
			
		}
		public GregorianCalendar getFechaPrevistaFinAlquiler() {
			return (GregorianCalendar) FechaPrevistaFinAlquiler.clone();
		}
		

		public void setFechaPrevistaFinAlquiler(GregorianCalendar fechaPrevistaFinAlquiler) throws FechaNoValidaException {
//			LocalDate fin = LocalDate.of(fechaPrevistaFinAlquiler.YEAR, fechaPrevistaFinAlquiler.MONTH, fechaPrevistaFinAlquiler.DAY_OF_MONTH);
//			LocalDate inicio = LocalDate.of(FechaInicioAlquiler.YEAR, FechaInicioAlquiler.MONTH, FechaInicioAlquiler.DAY_OF_MONTH);
			
//			if ((fin.compareTo(inicio)>0))
//			{
				FechaPrevistaFinAlquiler = fechaPrevistaFinAlquiler;
//			}else 
//			{
//				throw new FechaNoValidaException("Fecha anterior a la fecha de inicio");
//			}
			
		}
		@SuppressWarnings("static-access")
		public GregorianCalendar getFechaDevolucion() {
			//Creamos y devolvemos una copia
			return new GregorianCalendar (FechaDevolucion.YEAR, FechaDevolucion.MONTH, FechaDevolucion.DAY_OF_MONTH);
		}
		public Oficina getOficinaRecogida() {
			Oficina copia = new Oficina(OficinaRecogida);
			return copia;
		}

		public void setOficinaRecogida(Oficina oficinaRecogida) {
			Oficina copia = new Oficina(oficinaRecogida); //Copiamos la oficina dada
			OficinaRecogida = copia;	//Metemos la copia
		}

		public Oficina getOficinaEntrega() {
			Oficina copia = new Oficina(this.OficinaEntrega); //Copiamos
			return copia;	//Damos la copia
		}

		public void setOficinaEntrega(Oficina oficinaEntrega) {
			Oficina copia = new Oficina(oficinaEntrega);
			OficinaEntrega = copia ;
		}

		@SuppressWarnings("static-access")
		public void setFechaDevolucion(GregorianCalendar fechaDevolucion) throws FechaNoValidaException {
			
			//O es mayor el mes o el año de la fecha de devolución respecto la de inicio alquiler
			if (fechaDevolucion.MONTH > this.FechaInicioAlquiler.MONTH || fechaDevolucion.YEAR > this.FechaInicioAlquiler.YEAR)	
			{
				FechaDevolucion = fechaDevolucion;
			}else {
				throw new FechaNoValidaException("Fecha de devolución anterior a la fecha de inicio del alquiler");
			}
			
		}
		public void setAlquilado(Vehiculo aAlquilar,boolean si)
		{
			this.aAlquilar = aAlquilar;
			aAlquilar.setAlquilado(si);
		}
		
		//Constructores
		
		public Alquiler(Vehiculo aAlquilar, String codigo, GregorianCalendar fechaInicioAlquiler, GregorianCalendar fechaPrevistaFinAlquiler, Oficina OficinaRecogida, Oficina OficinaEntrega) throws FechaNoValidaException {
			super();
			this.setCodigo(codigo);
			this.setFechaInicioAlquiler(fechaInicioAlquiler);
			this.setFechaPrevistaFinAlquiler(fechaPrevistaFinAlquiler);
			this.setaAlquilar(aAlquilar);
			this.setOficinaRecogida(OficinaRecogida);
			this.setOficinaEntrega(OficinaEntrega);
			this.setAlquilado(aAlquilar, true); //Cuando se construye un alquiler el vehículo es alquilado
//			this.setCliente(cliente);
//			this.setEncargado(emple);
		}
		
		//Metodos
		/**
		 * @return El nº de días que el vehículo está alquilado
		 */
		@SuppressWarnings("static-access")
		public int getNumDias()
		{
			LocalDate inicio = LocalDate.of(this.FechaInicioAlquiler.YEAR, this.FechaInicioAlquiler.MONTH, this.FechaInicioAlquiler.DAY_OF_MONTH);
			LocalDate fin = LocalDate.of(this.FechaDevolucion.YEAR, this.FechaDevolucion.MONTH, this.FechaDevolucion.DAY_OF_MONTH);
			LocalDate resultado = fin.minusDays(inicio.getDayOfYear());
			return resultado.getDayOfYear();
		}
		
		public boolean isAcabado()
		{
			if (this.getFechaDevolucion() != null && this.getOficinaRecogida() != null)
			{
				return true;
			}else {
				return false;
			}
		}
		
		@Override
		public String toString()
		{
			return codigo+" - "+this.getPrecioAlquiler()+" | "+this.getFechaInicioAlquiler() ;
			
		}
}
